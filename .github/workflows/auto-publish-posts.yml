name: Auto-publish scheduled blog posts

on:
  schedule:
    # Run daily at 9 AM UTC (4 AM CDT / 3 AM CST)
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  publish-posts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check and publish scheduled posts
        run: |
          #!/bin/bash
          set -e
          
          # Initialize variables
          CURRENT_DATE=$(date -u +%Y-%m-%d)
          CHANGES_COUNT=0
          PUBLISHED_POSTS=()
          SKIPPED_POSTS=()
          ERROR_POSTS=()
          
          echo "üóìÔ∏è  Current date: $CURRENT_DATE"
          echo "üîç Scanning for draft posts to publish..."
          
          # Validate date format function
          validate_date() {
              local date="$1"
              if [[ $date =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                  return 0
              else
                  return 1
              fi
          }
          
          # Process each blog post file using process substitution
          while IFS= read -r file; do
              echo "üìÑ Checking file: $file"
              
              # Check if file has draft: true
              if grep -q "^draft: true" "$file"; then
                  echo "üìã Found draft post: $file"
                  
                  # Extract the date from front matter with better error handling
                  if POST_DATE=$(grep "^date: " "$file" | sed 's/date: //' | tr -d ' ' | head -1); then
                      if [[ -n "$POST_DATE" ]]; then
                          echo "üìÖ Post date: $POST_DATE"
                          
                          # Validate date format
                          if validate_date "$POST_DATE"; then
                              # Compare dates (if post date <= current date, publish it)
                              if [[ "$POST_DATE" <= "$CURRENT_DATE" ]]; then
                                  echo "üöÄ Publishing post: $file (scheduled: $POST_DATE)"
                                  
                                  # Create backup before modification
                                  cp "$file" "$file.backup"
                                  
                                  # Remove the draft: true line
                                  if sed -i '/^draft: true$/d' "$file"; then
                                      # Verify the change was successful
                                      if ! grep -q "^draft: true" "$file"; then
                                          rm "$file.backup"
                                          ((CHANGES_COUNT++))
                                          PUBLISHED_POSTS+=("$file")
                                          echo "‚úÖ Successfully published: $file"
                                      else
                                          # Restore backup if sed didn't work
                                          mv "$file.backup" "$file"
                                          ERROR_POSTS+=("$file (sed failed to remove draft line)")
                                          echo "‚ùå Failed to remove draft line from: $file"
                                      fi
                                  else
                                      # Restore backup if sed command failed
                                      mv "$file.backup" "$file"
                                      ERROR_POSTS+=("$file (sed command failed)")
                                      echo "‚ùå sed command failed for: $file"
                                  fi
                              else
                                  SKIPPED_POSTS+=("$file (scheduled for $POST_DATE)")
                                  echo "‚è≥ Not yet time to publish: $file (scheduled for $POST_DATE)"
                              fi
                          else
                              ERROR_POSTS+=("$file (invalid date format: $POST_DATE)")
                              echo "‚ùå Invalid date format in $file: $POST_DATE"
                          fi
                      else
                          ERROR_POSTS+=("$file (empty date field)")
                          echo "‚ùå Empty date field in: $file"
                      fi
                  else
                      ERROR_POSTS+=("$file (no date field found)")
                      echo "‚ùå No date field found in: $file"
                  fi
              else
                  echo "‚ÑπÔ∏è  Not a draft: $file"
              fi
          done < <(find main-docs/blog -name "index.md" -type f)
          
          # Report results
          echo ""
          echo "üìä PUBLISHING SUMMARY"
          echo "===================="
          echo "üìÖ Date: $CURRENT_DATE"
          echo "‚úÖ Posts published: $CHANGES_COUNT"
          echo "‚è≥ Posts skipped (future dates): ${#SKIPPED_POSTS[@]}"
          echo "‚ùå Posts with errors: ${#ERROR_POSTS[@]}"
          
          # Set environment variable for next step
          echo "CHANGES_COUNT=$CHANGES_COUNT" >> $GITHUB_ENV
          echo "PUBLISHED_POSTS_COUNT=${#PUBLISHED_POSTS[@]}" >> $GITHUB_ENV
          
          # Create arrays for summary step
          {
              echo "PUBLISHED_POSTS<<EOF"
              printf '%s\n' "${PUBLISHED_POSTS[@]}"
              echo "EOF"
          } >> $GITHUB_ENV
          
          {
              echo "ERROR_POSTS<<EOF"
              printf '%s\n' "${ERROR_POSTS[@]}"
              echo "EOF"
          } >> $GITHUB_ENV
          
          # Check if any files were modified using git
          if git diff --quiet; then
              echo "‚ÑπÔ∏è  No files were actually modified."
              echo "GIT_CHANGES=false" >> $GITHUB_ENV
          else
              echo "‚úÖ Git detected file changes."
              echo "GIT_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Commit and push changes
        if: env.GIT_CHANGES == 'true' && env.CHANGES_COUNT != '0'
        run: |
          echo "üìù Committing changes..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "üöÄ Auto-publish scheduled blog posts for $(date -u +%Y-%m-%d)

          Published ${{ env.PUBLISHED_POSTS_COUNT }} post(s):
          $(echo "${{ env.PUBLISHED_POSTS }}" | sed 's/^/- /')"
          git push
          echo "‚úÖ Changes committed and pushed successfully!"

      - name: Create summary
        run: |
          echo "## üöÄ Auto-publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ env.CHANGES_COUNT }}" != "0" ]]; then
              echo "### ‚úÖ Published Posts (${{ env.PUBLISHED_POSTS_COUNT }})" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              if [[ -n "${{ env.PUBLISHED_POSTS }}" ]]; then
                  echo "${{ env.PUBLISHED_POSTS }}" | while read -r post; do
                      if [[ -n "$post" ]]; then
                          echo "- \`$post\`" >> $GITHUB_STEP_SUMMARY
                      fi
                  done
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üéâ **${{ env.PUBLISHED_POSTS_COUNT }} blog post(s) were successfully published!**" >> $GITHUB_STEP_SUMMARY
          else
              echo "‚ÑπÔ∏è **No posts were scheduled for publication today.**" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ env.ERROR_POSTS }}" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ‚ùå Posts with Errors" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "${{ env.ERROR_POSTS }}" | while read -r error; do
                  if [[ -n "$error" ]]; then
                      echo "- \`$error\`" >> $GITHUB_STEP_SUMMARY
                  fi
              done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Workflow completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> $GITHUB_STEP_SUMMARY
